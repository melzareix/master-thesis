@misc{unicode,
	note = {[Online; accessed 2022-04-15]},
	url={https://www.unicode.org/versions/Unicode14.0.0/},
	title = {Unicode 14.0.0},
	volume = {},
}

@misc{utf16usage,
	note = {[Online; accessed 2022-04-15]},
	url = {https://w3techs.com/technologies/details/en-utf16},
	publisher = {w3techs.com},
	title = {Usage {Statistics} and {Market} {Share} of {UTF}-16 for {Websites}, {April} 2022},
	volume = {},
}

@misc{utf8usage,
	note = {[Online; accessed 2022-04-15]},
	url = {https://googleblog.blogspot.com/2008/05/moving-to-unicode-51.html},
	year = {2008},
	month = {may 5},
	publisher = {googleblog.blogspot.com},
	title = {Moving to {Unicode} 5.1},
	volume = {},
}

@book{unicodeexplainedbook,
  added-at = {2007-01-19T16:38:30.000+0100},
  address = {Beijing [u.a.]},
  author = {Korpela, Jukka K.},
  biburl = {https://www.bibsonomy.org/bibtex/24bc1817dcabc35583c3dd2aad885c9f1/gregor},
  description = {KUG Recherche-Portal},
  interhash = {7641eb6ecc34bf56465cac597d23c4a6},
  intrahash = {4bc1817dcabc35583c3dd2aad885c9f1},
  isbn = {0-596-10121-X},
  keywords = {Unicode ISO-Norm Zeichensatz Internationalisierung},
  publisher = {O'Reilly},
  timestamp = {2007-01-19T16:38:30.000+0100},
  title = {Unicode explained},
  year = 2006
}

@misc{utf8RFC,
	note = {[Online; accessed 2022-04-16]},
	url = {https://datatracker.ietf.org/doc/html/rfc3629#section-3},
	publisher = {datatracker.ietf.org},
	title = {RFC 3629 - {UTF}-8, a transformation format of {ISO} 10646},
	volume = {},
}

@INPROCEEDINGS{llvm,
  author={Lattner, C. and Adve, V.},
  booktitle={International Symposium on Code Generation and Optimization, 2004. CGO 2004.}, 
  title={LLVM: a compilation framework for lifelong program analysis  amp; transformation}, 
  year={2004},
  volume={},
  number={},
  pages={75-86},
  doi={10.1109/CGO.2004.1281665}}


@inproceedings{llvminfra,
  title={Formalizing the SSA-based compiler for verified advanced program transformations},
  author={Jianzhou Zhao},
  year={2013}
}

@misc{llvmgcc,
	note = {[Online; accessed 2022-04-17]},
	publisher = {www.phoronix.com},
	url = {https://www.phoronix.com/scan.php?page=article&item=11900k-gcc11-clang12&num=2},
	title = {GCC 11 vs. {LLVM} {Clang} 12 {Performance} {On} {The} {Intel} {Core} i9 11900K {Is} {A} {Heated} {Race} - {Phoronix}},
	volume = {},
}

@misc{simdscalar,
	note = {[Online; accessed 2022-04-19]},
	url = {http://ftp.cvut.cz/kernel/people/geoff/cell/ps3-linux-docs/CellProgrammingTutorial/BasicsOfSIMDProgramming.html},
	publisher = {ftp.cvut.cz},
	title = {Basics of {SIMD} {Programming}},
	volume = {},
}

@misc{2022Firebird,
	note = {[Online; accessed 2022-04-22]},
	url = {http://www.firebirdsql.org/file/documentation/html/en/refdocs/fblangref40/firebird-40-language-reference.html#fblangref40-commons-syntaxregex},
	year = {2022},
	month = {3},
	publisher = {www.firebirdsql.org},
	title = {Firebird 4.0 {Language} {Reference}},
	volume = {},
}

@misc{antlr,
	note = {[Online; accessed 2022-04-23]},
	publisher = {www.antlr.org},
	url = {https://www.antlr.org/},
	title = {ANTLR},
	volume = {},
}

% related work
@inproceedings{simdregextpch,
author = {Sitaridi, Evangelia and Polychroniou, Orestis and Ross, Kenneth A.},
title = {SIMD-Accelerated Regular Expression Matching},
year = {2016},
isbn = {9781450343190},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2933349.2933357},
doi = {10.1145/2933349.2933357},
booktitle = {Proceedings of the 12th International Workshop on Data Management on New Hardware},
articleno = {8},
numpages = {7},
location = {San Francisco, California},
series = {DaMoN '16}
}

@misc{dk,
	note = {[Online; accessed 2022-04-24]},
	url = {https://www.brics.dk/automaton/},
	publisher = {www.brics.dk},
	title = {dk.brics.automaton - finite-state automata and regular expressions for {Java}},
	volume = {},
}

@article{firejpaper,
author = {Karakoidas, Vassilios and Spinellis, Diomidis},
title = {FIRE/J—optimizing regular expression searches with generative programming},
journal = {Software: Practice and Experience},
volume = {38},
number = {6},
pages = {557-573},
keywords = {regular expressions, just-in time (JIT), Java, Java virtual machine (JVM), automata, domain specific languages (DSL), generative programming},
doi = {https://doi.org/10.1002/spe.841},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.841},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/spe.841},
abstract = {Abstract Regular expressions are a powerful tool for analyzing and manipulating text. Their theoretical background lies within automata theory and formal languages. The FIRE/J (fast implementation of regular expressions for Java) regular expression library is designed to provide maximum execution speed while remaining portable across different machine architectures. To achieve that, FIRE/J transforms each regular expression into a tailor-made class file, which is compiled directly to Java virtual machine (JVM) bytecodes. The library is compatible with the POSIX standard. Copyright © 2007 John Wiley \& Sons, Ltd.},
year = {2008}
}

@misc{azul,
	note = {[Online; accessed 2022-05-21]},
	author = {Krill, Paul},
	url = {https://www.infoworld.com/article/3193078/azul-introduces-llvm-compiler-to-java-runtime.html},
	publisher = {www.infoworld.com},
	title = {Azul introduces LLVM compiler to Java run-time.},
	volume = {},
}




@inproceedings{parabix,
author = {Cameron, Robert and Medforth, Nigel and Lin, Dan and Denis, Dale and Sumner, William},
year = {2015},
month = {11},
pages = {},
title = {Bitwise Data Parallelism with LLVM: The ICgrep Case Study},
doi = {10.1007/978-3-319-27122-4_26}
}

@article{dfasize,
author = {Oleg B. Lupanov},
journal = {Problemy Kibernetiki},
pages = {321-326},
title = {A comparison of two types of finite sources},
volume = {9},
year = {1963},
}

@misc{llvmapi,
	note = {[Online; accessed 2022-05-09]},
	url = {https://llvm.org/docs/ProgrammersManual.html},
	publisher = {llvm.org},
	title = {LLVM {Programmer}\textquoteright{}s {Manual} --- {LLVM} 15.0.0git documentation},
	volume = {},
}

@article{epsm,
title = {Fast and flexible packed string matching},
journal = {Journal of Discrete Algorithms},
volume = {28},
pages = {61-72},
year = {2014},
note = {StringMasters 2012 \& 2013 Special Issue (Volume 1)},
issn = {1570-8667},
doi = {https://doi.org/10.1016/j.jda.2014.07.003},
url = {https://www.sciencedirect.com/science/article/pii/S1570866714000471},
author = {Simone Faro and M. Oğuzhan Külekci},
keywords = {Exact string matching, Text algorithms, Experimental algorithms, Online searching, Information retrieval},
abstract = {Searching for all occurrences of a pattern in a text is a fundamental problem in computer science with applications in many other fields, like natural language processing, information retrieval and computational biology. In the last two decades a general trend has appeared trying to exploit the power of the word RAM model to speed-up the performances of classical string matching algorithms. In this model an algorithm operates on words of length w, grouping blocks of characters, and arithmetic and logic operations on the words take one unit of time. In this paper we use specialized word-size packed string matching instructions, based on the Intel streaming SIMD extensions (SSE) technology, to design a very fast string matching algorithm. We evaluate our solution in terms of efficiency, stability and flexibility, where we propose to use the deviation in running time of an algorithm on distinct equal length patterns as a measure of stability. From our experimental results it turns out that, despite their quadratic worst case time complexity, the new presented algorithm becomes the clear winner on the average in many cases, when compared against the most recent and effective algorithms known in literature.}
}

@misc{simdalgo,
	note = {[Online; accessed 2022-05-15]},
	url = {http://0x80.pl/articles/simd-strfind.html#algorithm-1-generic-simd},
	year = {2016},
	month = {nov 28},
	publisher = {0x80.pl},
	title = {SIMD-friendly algorithms for substring searching},
	volume = {},
}


@article{ssa,
author = {Cytron, Ron and Ferrante, Jeanne and Rosen, Barry and Wegman, Mark and Zadeck, Kenneth},
year = {1989},
month = {01},
pages = {25-35},
title = {Efficient method of computing static single assignment form},
isbn = {0-89791-294-2},
journal = {[No source information available]},
doi = {10.1145/75277.75280}
}

@article{domalgo,
author = {Cooper, Keith and Harvey, Timothy and Kennedy, Ken},
year = {2006},
month = {01},
pages = {},
title = {A Simple, Fast Dominance Algorithm},
journal = {Rice University, CS Technical Report 06-33870}
}

@inproceedings{pcre2_jit,
author = {Herczeg, Zolt\'{a}n},
title = {Extending the PCRE Library with Static Backtracking Based Just-in-Time Compilation Support},
year = {2014},
isbn = {9781450326704},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2544137.2544146},
doi = {10.1145/2544137.2544146},
booktitle = {Proceedings of Annual IEEE/ACM International Symposium on Code Generation and Optimization},
pages = {306–315},
numpages = {10},
keywords = {Static backtracking, JIT compiling, Regular expressions},
location = {Orlando, FL, USA},
series = {CGO '14}
}

@misc{rejit,
	note = {[Online; accessed 2022-05-22]},
	url = {https://lwn.net/Articles/589009},
	publisher = {lwn.net},
	title = {A {JIT} for grepping: jrep and rejit [{LWN}.net]},
	volume = {},
}


@misc{unicodeguideline,
	note = {[Online; accessed 2022-05-22]},
	url = {https://www.unicode.org/reports/tr18/tr18-23.html},
	author = {Davis, Mark},
	publisher = {www.unicode.org},
	title = {UTS \#18: Unicode {Regular} {Expressions}},
	volume = {},
}

@misc{utf8-ranges,
	note = {[Online; accessed 2022-05-23]},
	url = {https://github.com/BurntSushi/utf8-ranges},
	author = {Gallant, Andrew},
	publisher = {github.com},
	title = {GitHub - {BurntSushi}/utf8-ranges: Convert contiguous ranges of {Unicode} codepoints to {UTF}-8 byte ranges.},
	volume = {},
}

@incollection{Hopcroftalgo,
title = {AN n log n ALGORITHM FOR MINIMIZING STATES IN A FINITE AUTOMATON},
editor = {Zvi Kohavi and Azaria Paz},
booktitle = {Theory of Machines and Computations},
publisher = {Academic Press},
pages = {189-196},
year = {1971},
isbn = {978-0-12-417750-5},
doi = {https://doi.org/10.1016/B978-0-12-417750-5.50022-1},
url = {https://www.sciencedirect.com/science/article/pii/B9780124177505500221},
author = {John Hopcroft},
abstract = {Publisher Summary
Most basic texts on finite automata give algorithms for minimizing the number of states in a finite automaton. However, a worst case analysis of these algorithms indicates that they are n2 processes, where n is the number of states. For finite automata with large numbers of states, these algorithms are grossly inefficient. This chapter describes an algorithm for minimizing the states, in which the asymptotic running time in a worst-case analysis grows as n log n. The constant of proportionality depends linearly on the number of input symbols. The same algorithm can be used to determine if two finite automata are equivalent. Extensive use of list processing is employed to reduce the computation time. As the time needed to partition on a block is proportional to the transitions into the block, the total number of steps in the algorithm is bounded by n log n.}
}

@misc{regexlib,
	note = {[Online; accessed 2022-05-28]},
	url = {https://regexlib.com},
	publisher = {regexlib.com},
	title = {Regular {Expression} {Library}},
	volume = {},
}

@misc{loghub,
  doi = {10.48550/ARXIV.2008.06448},
  
  url = {https://arxiv.org/abs/2008.06448},
  
  author = {He, Shilin and Zhu, Jieming and He, Pinjia and Lyu, Michael R.},
  
  keywords = {Software Engineering (cs.SE), FOS: Computer and information sciences, FOS: Computer and information sciences},
  
  title = {Loghub: A Large Collection of System Log Datasets towards Automated Log Analytics},
  
  publisher = {arXiv},
  
  year = {2020},
  
  copyright = {arXiv.org perpetual, non-exclusive license}
}

@misc{re2,
	note = {[Online; accessed 2022-05-30]},
	url = {https://github.com/google/re2},
	author = {Cox, Russ},
	year = {2022},
	month = {may 10},
	publisher = {github.com},
	title = {GitHub - google/re2: RE2 is a fast, safe, thread-friendly alternative to backtracking regular expression engines like those used in {PCRE}, {Perl}, and {Python}. {It} is a {C}++ library.},
	volume = {},
}


@misc{pcre2,
	note = {[Online; accessed 2022-05-30]},
	url = {https://www.pcre.org/current/doc/html/pcre2.html},
	author = {Hazel, Philip},
	publisher = {www.pcre.org},
	title = {pcre2 specification},
	volume = {},
}

@misc{Boost,
	note = {[Online; accessed 2022-05-30]},
	url = {https://www.boost.org/doc/libs/1_79_0/libs/regex/doc/html/index.html},
	author = {, Boost},
	publisher = {www.boost.org},
	title = {Boost.{Regex} 7.0.1 - 1.79.0},
	volume = {},
}

@misc{tpch,
	note = {[Online; accessed 2022-05-30]},
	url = {https://www.tpc.org/tpch/},
	publisher = {www.tpc.org},
	title = {TPC-{H} {Homepage}},
	volume = {},
}

@misc{regexredux,
	note = {[Online; accessed 2022-05-30]},
	url = {https://benchmarksgame-team.pages.debian.net/benchmarksgame/description/regexredux.html},
	publisher = {benchmarksgame-team.pages.debian.net},
	title = {regex-redux description ({Benchmarks} {Game})},
	volume = {},
}

@INPROCEEDINGS{parabixorg,  author={Lin, Dan and Medforth, Nigel and Herdy, Kenneth S. and Shriraman, Arrvindh and Cameron, Rob},  booktitle={IEEE International Symposium on High-Performance Comp Architecture},   title={Parabix: Boosting the efficiency of text processing on commodity processors},   year={2012},  volume={},  number={},  pages={1-12},  doi={10.1109/HPCA.2012.6169041}}


@inproceedings{parabixregex,
author = {Cameron, Robert D.},
title = {A Case Study in SIMD Text Processing with Parallel Bit Streams: UTF-8 to UTF-16 Transcoding},
year = {2008},
isbn = {9781595937957},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1345206.1345222},
doi = {10.1145/1345206.1345222},
abstract = {High performance SIMD text processing using the method of parallel bit streams is introduced with a case study of UTF-8 to UTF-16 transcoding. A forward transform converts byte-oriented character stream data into eight parallel bit streams. Decoding, validation and computation of UTF-8 indexed UTF-16 bit streams are performed using bit-parallel logic and shifting operations. Conversion from UTF-8 indexing to UTF-16 indexing is performed using parallel bit deletion. The inverse transform is applied to yield high and low UTF-16 byte streams which are then merged. Combined with optimization techniques for blocks of ASCII data, speed-ups of 3 to 25 times are achieved on commodity processors compared with optimized byte-at-a-time code. Further applications of the method of parallel bit streams to bulk text processing applications are briefly discussed along with future prospects for the combination of intraregister and intrachip parallelism on multicore processors.},
booktitle = {Proceedings of the 13th ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming},
pages = {91–98},
numpages = {8},
keywords = {UTF-16, simd text processing, transcoding, UTF-8, parallel bit streams},
location = {Salt Lake City, UT, USA},
series = {PPoPP '08}
}

@inproceedings{parabixregexnew,
author = {Cameron, Robert D. and Shermer, Thomas C. and Shriraman, Arrvindh and Herdy, Kenneth S. and Lin, Dan and Hull, Benjamin R. and Lin, Meng},
title = {Bitwise Data Parallelism in Regular Expression Matching},
year = {2014},
isbn = {9781450328098},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2628071.2628079},
doi = {10.1145/2628071.2628079},
abstract = {A new parallel algorithm for regular expression matching is developed and applied to the classical grep (global regular expression print) problem. Building on the bitwise data parallelism previously applied to the manual implementation of token scanning in the Parabix XML parser, the new algorithm represents a general solution to the problem of regular expression matching using parallel bit streams. On widely-deployed commodity hardware using 128-bit SSE2 SIMD technology, our algorithm implementations can substantially outperform traditional grep implementations based on NFAs, DFAs or backtracking. 5X or better performance advantage against the best of available competitors is not atypical. The algorithms are also designed to scale with the availability of additional parallel resources such as the wider SIMD facilities (256-bit) of Intel AVX2 or future 512-bit extensions. Our AVX2 implementation showed dramatic reduction in instruction count and significant improvement in speed. Our GPU implementations show further acceleration.},
booktitle = {Proceedings of the 23rd International Conference on Parallel Architectures and Compilation},
pages = {139–150},
numpages = {12},
keywords = {regular expression matching, parallel bit streams},
location = {Edmonton, AB, Canada},
series = {PACT '14}
}

@misc{nfadfaeq,
	note = {[Online; accessed 2022-06-04]},
	url = {https://www.cs.odu.edu/~toida/nerzic/390teched/regular/fa/proof-nfa-2-dfa.html},
	author = {Toida, Shunichi},
	publisher = {www.cs.odu.edu},
	title = {Equivalence of {NFA} and {DFA}},
	volume = {},
}


 @misc{recsys1, title={RecSys 2015 – scalable recommender systems: Where machine learning meets search!}, url={https://bit.ly/3NSGnGl}, journal={Speaker Deck}} 
 
@inproceedings{nlp1,
author = {Gianfelice, Davide and Lesmo, Leonardo and Palmirani, Monica and Perlo, Daniele and Radicioni, Daniele P.},
title = {Modificatory Provisions Detection: A Hybrid NLP Approach},
year = {2013},
isbn = {9781450320801},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2514601.2514607},
doi = {10.1145/2514601.2514607},
booktitle = {Proceedings of the Fourteenth International Conference on Artificial Intelligence and Law},
pages = {43–52},
numpages = {10},
keywords = {natural language processing, information extraction},
location = {Rome, Italy},
series = {ICAIL '13}
}

@article{nlp2,
author = {Shahbaz, Muzammil and McMinn, Phil and Stevenson, Mark},
title = {Automatic Generation of Valid and Invalid Test Data for String Validation Routines Using Web Searches and Regular Expressions},
year = {2015},
issue_date = {January 2015},
publisher = {Elsevier North-Holland, Inc.},
address = {USA},
volume = {97},
number = {P4},
issn = {0167-6423},
url = {https://doi.org/10.1016/j.scico.2014.04.008},
doi = {10.1016/j.scico.2014.04.008},
journal = {Sci. Comput. Program.},
month = {jan},
pages = {405–425},
numpages = {21},
keywords = {Web searches, Regular expressions, Test data generation}
}

@INPROCEEDINGS{graph1,  author={Fan, Wenfei and Li, Jianzhong and Ma, Shuai and Tang, Nan and Wu, Yinghui},  booktitle={2011 IEEE 27th International Conference on Data Engineering},   title={Adding regular expressions to graph reachability and pattern queries},   year={2011},  volume={},  number={},  pages={39-50},  doi={10.1109/ICDE.2011.5767858}}


@article{querycomp,
author = {Neumann, Thomas},
title = {Efficiently Compiling Efficient Query Plans for Modern Hardware},
year = {2011},
issue_date = {June 2011},
publisher = {VLDB Endowment},
volume = {4},
number = {9},
issn = {2150-8097},
url = {https://doi.org/10.14778/2002938.2002940},
doi = {10.14778/2002938.2002940},
journal = {Proc. VLDB Endow.},
month = {jun},
pages = {539–550},
numpages = {12}
}

@article{cpumemgap,
author = {Carvalho, Carlos},
year = {2002},
month = {01},
pages = {},
title = {The gap between processor and memory speeds}
}

 @misc{pcre2opts, title={JIT Compiler of PCRE2}, url={https://zherczeg.github.io/sljit/pcre2_jit.html}, journal={Jit compiler of PCRE2}} 